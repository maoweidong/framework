package nds.model.dao;

import nds.model.base.BaseUNoteDAO;
import nds.query.*;
import nds.schema.*;
import nds.util.*;
import java.util.*;
import javax.servlet.http.*;

import nds.control.web.*;

/**
 * This class has been automatically generated by Hibernate Synchronizer.
 * For more information or documentation, visit The Hibernate Synchronizer page
 * at http://www.binamics.com/hibernatesync or contact Joe Hudson at joe@binamics.com.
 *
 * This is the object class that relates to the U_NOTE table.
 * Any customizations belong here.
 */
public class UNoteDAO extends BaseUNoteDAO {
	private QueryRequestImpl createRequest(HttpServletRequest request) throws Exception{
		UserWebImpl userWeb = ((UserWebImpl)WebUtils.getSessionContextManager(request.getSession(true)).getActor(nds.util.WebKeys.USER));	
		QueryEngine engine=QueryEngine.getInstance();
		QueryRequestImpl query= engine.createRequest( userWeb.getSession());
		TableManager manager= TableManager.getInstance();
		Table table= manager.getTable("u_note");
		query.setMainTable(table.getId());
		// select
		query.addSelection(table.getPrimaryKey().getId());
		query.addSelection(manager.getColumn("u_note", "PRIORITYRULE").getId());
		query.addSelection(manager.getColumn("u_note", "title").getId());
		query.addSelection(manager.getColumn("u_note", "ownerid").getId(),
				manager.getColumn("users","name").getId(), true);
		query.addSelection(manager.getColumn("u_note", "startdate").getId());
		query.addSelection(manager.getColumn("u_note", "creationdate").getId());
		query.addSelection(manager.getColumn("u_note", "docstatus").getId());
        // where 
		Expression expr, expr2;
		expr=userWeb.getSecurityFilter(table.getName(), nds.security.Directory.READ);
		// limit to my self
		expr2=new Expression(new ColumnLink(new int[]{manager.getColumn("u_note", "user_id").getId()}), "="+ userWeb.getUserId(), " is myself");
		if(expr!=null && expr.isEmpty()==false) expr2= expr.combine(expr2,SQLCombination.SQL_AND,null);
		query.addParam(expr2);
		return query;		
	}
	public QueryResult find(HttpServletRequest request, int maxRecords, int startIdx, int orderColumn, boolean ascending ) throws Exception{
		QueryEngine engine=QueryEngine.getInstance();
		
		QueryRequestImpl query=createRequest(request);
		// range
		query.setRange( startIdx, maxRecords);
		// order
		query.setOrderBy(new int[]{ orderColumn}, ascending);
		
		logger.debug(query.toSQL());
		return engine.doQuery( query);
	}
	public int getTotalCount(HttpServletRequest request) throws Exception{
		QueryEngine engine=QueryEngine.getInstance();
		QueryRequestImpl query=createRequest(request);
		// range
		logger.debug(query.toCountSQL());
		return engine.getTotalResultRowCount( query);
		
	}
}