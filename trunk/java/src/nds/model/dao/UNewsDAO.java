package nds.model.dao;
import java.sql.*;
import nds.model.base.BaseUNewsDAO;
import nds.query.*;
import nds.schema.*;
import nds.util.*;

import java.util.*;
import javax.servlet.http.*;
import nds.control.web.*;
/**
 * This class has been automatically generated by Hibernate Synchronizer.
 * For more information or documentation, visit The Hibernate Synchronizer page
 * at http://www.binamics.com/hibernatesync or contact Joe Hudson at joe@binamics.com.
 *
 * This is the object class that relates to the U_NEWS table.
 * Any customizations belong here.
 */
public class UNewsDAO extends BaseUNewsDAO {
	private final static String GET_NEWS="select content from u_news where id=?";
	/**
	 * Load content (clob) from db
	 * @param newsId
	 * @return
	 * @throws Exception
	 */
	public static String getContent(int newsId) throws Exception{
		String content=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		Connection conn=QueryEngine.getInstance().getConnection();
		try{
		pstmt=conn.prepareStatement(GET_NEWS);
		pstmt.setInt(1,newsId);
		rs=pstmt.executeQuery();
		if(rs.next()){
			content= rs.getString(1);
		}
		}finally{
			try{if(rs!=null) rs.close();}catch(Throwable t){}
			try{if(pstmt!=null) pstmt.close();}catch(Throwable t){}
			try{if(conn!=null) conn.close();}catch(Throwable t){}
		}
		return content;
	}	
	/**
	 * Selection: id, subject, modifieddate, style, contenturl, ad_client_id
	 * Where:	Read permission and IsActive='Y' and ispublic='Y' if user is not set in session, 
	 * else, load permission setting on the user
	 * 
	 * 
	 * @param request 
	 * @return
	 * @throws Exception
	 */
	public QueryRequestImpl createRequest(HttpServletRequest request,  UserWebImpl userWeb) throws Exception{
		boolean isGuest=isGuest(userWeb);
		QueryEngine engine=QueryEngine.getInstance();
		QueryRequestImpl query=engine.createRequest(userWeb!=null? userWeb.getSession(): null);
		TableManager manager= TableManager.getInstance();
		Table table= manager.getTable("u_news");
		query.setMainTable(table.getId());
		// select
		query.addSelection(table.getPrimaryKey().getId());
		query.addSelection(manager.getColumn("u_news", "subject").getId());
		query.addSelection(manager.getColumn("u_news", "modifieddate").getId());
		query.addSelection(manager.getColumn("u_news", "style").getId());
		query.addSelection(manager.getColumn("u_news", "contenturl").getId());
		query.addSelection(manager.getColumn("u_news", "ad_client_id").getId(), manager.getColumn("ad_client", "name").getId(), false);
        // where 
		Expression expr;
		if(isGuest){
			expr=new Expression(new ColumnLink(new String[]{"u_news.ispublic"}), "=Y", null);
		}else{
			expr=userWeb.getSecurityFilter(table.getName(), nds.security.Directory.READ);
		}
		query.addParam(expr);
		// set only active news
		expr = new Expression(new ColumnLink(new String[]{"u_news.isactive"}), "=Y", null);
		query.addParam(expr);
		// order
		query.addOrderBy(new int[]{ manager.getColumn("u_news", "priority").getId() }, false);
		query.addOrderBy(new int[]{ manager.getColumn("u_news", "modifieddate").getId() }, false);
		return query;		
		
	}
	/**
	 * 
	 * @param request
	 * @param maxRecords
	 * @param startIdx
	 * @param categoryId if -1, will retrieve all
	 * @param keywords can be null
	 * @return
	 * @throws Exception
	 */
	public QueryResult find(HttpServletRequest request, int maxRecords, int startIdx, int categoryId, String keywords) throws Exception{
		QueryEngine engine=QueryEngine.getInstance();
		UserWebImpl userWeb= getNDSUser(request);
		QueryRequestImpl query=createRequest(request, userWeb);
		Expression expr=null;
		if( categoryId !=-1 ){
			ColumnLink clink=new ColumnLink(new String[]{"u_news.U_NEWSCATEGORY_ID"});
			expr=new Expression(clink, "="+categoryId, null );
			query.addParam(expr);
		}
		if(!Validator.isNull(keywords)){
			keywords=StringUtils.replaceToken(keywords, ",;£¬£» ","|");
			expr=new Expression(null, "CATSEARCH(U_NEWS.KEYWORDS, '"+ keywords +"', 'order by modifieddate desc') > 0", null );
			query.addParam(expr);
		}

		// range
		query.setRange( startIdx, maxRecords);
		
		logger.debug(query.toSQL());
		return engine.doQuery( query);
	}
	/**
	 * Get headlines that user can see
	 * @param request
	 * @return
	 * @throws Exception
	 */
	public QueryResult getHeadLines(HttpServletRequest request) throws Exception{
		QueryEngine engine=QueryEngine.getInstance();
		UserWebImpl userWeb= getNDSUser(request);
		QueryRequestImpl query=createRequest(request, userWeb);
		Expression expr=null;
		ColumnLink clink=new ColumnLink(new String[]{"u_news.isheadline"});
		expr=new Expression(clink, "=Y", null );
		query.addParam(expr);
		
		logger.debug(query.toSQL());
		return engine.doQuery( query);
	}
	public int getTotalCount(HttpServletRequest request) throws Exception{
		QueryEngine engine=QueryEngine.getInstance();
		UserWebImpl userWeb= getNDSUser(request);
		QueryRequestImpl query=createRequest(request,userWeb );
		// range
		logger.debug(query.toCountSQL());
		return engine.getTotalResultRowCount( query);
		
	}
	/**
	 * Return news categories for guest (empty) or registered users
	 * @param request
	 * @return new categories that current user can view, PairTable's key: id, value category name
	 *  if current is Guest (id=-1) then return empty categories
	 * @throws Exception
	 */
	public PairTable getNewsCategories(HttpServletRequest request) throws Exception{
		PairTable pt=new PairTable();
		UserWebImpl userWeb =getNDSUser(request);
		if(isGuest(userWeb)) return pt;
		QueryEngine engine=QueryEngine.getInstance();
		QueryRequestImpl query= engine.createRequest(userWeb.getSession());
		TableManager manager= TableManager.getInstance();
		Table table= manager.getTable("U_NEWSCATEGORY");
		query.setMainTable(table.getId());
		// select
		query.addSelection(table.getPrimaryKey().getId());
		query.addSelection(manager.getColumn("U_NEWSCATEGORY", "NAME").getId());
		
        // where 
		Expression expr;
		expr=userWeb.getSecurityFilter(table.getName(), nds.security.Directory.READ);
		query.addParam(expr);
		// order
		query.setOrderBy(new int[]{ manager.getColumn("U_NEWSCATEGORY", "ID").getId() }, true);
		
		QueryResult res= engine.doQuery( query);
		while (res.next()){
			pt.put( res.getObject(1), res.getObject(2));
		}
		return pt;		
		
	}
	public boolean isGuest(HttpServletRequest request ){
		UserWebImpl userWeb= getNDSUser(request);
		return isGuest(userWeb);
	}
	public boolean isGuest(UserWebImpl userWeb){
		return  (userWeb==null || userWeb.getUserId()==UserWebImpl.GUEST_ID);
	}
	/**
	 * 
	 * @param request
	 * @return null if user not find
	 */
	public UserWebImpl getNDSUser(HttpServletRequest request ){
		UserWebImpl userWeb=null;
		if( request.getSession(true).getAttribute(WebKeys.SESSION_CONTEXT_MANAGER)!=null){
			userWeb = ((UserWebImpl)WebUtils.getSessionContextManager(request.getSession(true)).getActor(nds.util.WebKeys.USER));
		}
		return userWeb;
	}
	/**
	 * default maximum to 100 records of specified parent, if user not logged, only public news (ispublic='Y') 
	 * will return;
	 * @param request
	 * @param objectId
	 * @return
	 * @throws Exception
	 */
	public QueryResult findChildren(HttpServletRequest request, int objectId) throws Exception{
		QueryEngine engine=QueryEngine.getInstance();
		UserWebImpl userWeb =getNDSUser(request);
		//if( userWeb==null || userWeb.getUserId()==-1) return pt;
		QueryRequestImpl query=createRequest(request, userWeb);

		ColumnLink clink=new ColumnLink(new String[]{"u_news.parent_id"});
		Expression expr=new Expression(clink, "="+objectId, null );
		query.addParam(expr);
		// range
		query.setRange( 0, 100);
		
		logger.debug(query.toSQL());
		return engine.doQuery( query);
	}
	/**
	 * Relative news, maximum to recordCount records
	 * @param request
	 * @param keywords will be replaced with "|" for "," or "£¬"
	 * @param recordCount 
	 * @return null if keywords is Null or empty
	 * @throws Exception
	 */
	public QueryResult findRelativeNews(HttpServletRequest request, String keywords, int recordCount) throws Exception{
		if (Validator.isNull(keywords)) return null;
		QueryEngine engine=QueryEngine.getInstance();
		UserWebImpl userWeb= getNDSUser(request);
		QueryRequestImpl query=createRequest(request, userWeb);
		Expression expr=null;
		keywords= StringUtils.replaceToken(keywords, ",;£¬£» ","|");
		if( isGuest(userWeb)){
			//guest, show all news with keywords related to it, but not to same company
			expr=new Expression(null, "CATSEARCH(U_NEWS.KEYWORDS, '"+ keywords +"', 'order by modifieddate desc') > 0", null );
		}else{
			keywords= StringUtils.replaceToken(keywords, ",;£¬£» ","|");
			Object clientId= userWeb.getSession().getAttribute("$AD_CLIENT_ID$");
			expr=new Expression(null, "CATSEARCH(U_NEWS.KEYWORDS, '"+ keywords +"', 'ad_client_id="+ clientId+" order by modifieddate desc') > 0", null );
		}
		query.addParam(expr);
		// range
		query.setRange( 0, recordCount);
		
		logger.debug(query.toSQL());
		return engine.doQuery( query);
	}
	
}