package nds.model.dao;

import nds.log.*;
import org.hibernate.HibernateException;
import org.hibernate.LockMode;
import org.hibernate.cfg.Configuration;
import org.hibernate.Session;
import java.net.URL;
import nds.util.*;
import nds.query.*;
import java.util.*;
/**
 * This class has been automatically generated by Hibernate Synchronizer.
 * For more information or documentation, visit The Hibernate Synchronizer page
 * at http://www.binamics.com/hibernatesync or contact Joe Hudson at joe@binamics.com.
 */
public abstract class _RootDAO extends nds.model.base._BaseRootDAO {
	protected Logger logger= LoggerManager.getInstance().getLogger(this.getClass().getName());
	/**
	 * Configure the session factory by reading hibernate config file
	 * @param configFileName the name of the configuration file
	 */
	public static void initialize (URL configFileName) throws HibernateException {
		if (null == configFileName && sessionFactoryMap.size() > 0) return;
		else if (null != sessionFactoryMap.get(configFileName.toString())) return;
		else {
			Configuration cfg = new Configuration();
			if (null == configFileName)
				cfg.configure();
			else
				cfg.configure(configFileName);
			setSessionFactory(configFileName.toString(), cfg.buildSessionFactory());
			System.out.println( " New Hibernate DAO initialized using " + configFileName);
		}
		
	}
	public Session createSession(java.sql.Connection conn) throws HibernateException {
		return getSessionFactory().openSession(conn);
	}
	/**
	 * Get table DDL
	 * @param tableName
	 * @return
	 * @throws Exception
	 */
	public static String getDDL(String tableName, int clientId) throws Exception{
		if ( Validator.isNull( tableName)) return null;
		String ddl=new String();
		String funcName="get_ddl";
		ArrayList params=new ArrayList();
		params.add(tableName);
		params.add(new Integer(clientId));
		ArrayList results=new ArrayList();
		results.add(ddl);
		Collection col=QueryEngine.getInstance().executeFunction(funcName, params, results);
		if( col!=null && col.size()>0){
			ddl= (String) col.toArray()[0];
		}
		return ddl;
	}
}